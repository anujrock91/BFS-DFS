package Snippet;
import java.util.*;

public class MHTs {
	
	 public List<Integer> findMinHeightTrees(int n, int[][] edges) {
	        if(n==0){ return new ArrayList(); } 
	        if(n==1){ ArrayList<Integer> z = new ArrayList<Integer>(); z.add(n); return z;}
			int min = Integer.MAX_VALUE;
			int [] visit = new int[n];
			ArrayList<Integer> result = new ArrayList<>();
			HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();
			for(int edge[]: edges){
				if(map.containsKey(edge[0])){
					map.get(edge[0]).add(edge[1]);
					visit[edge[0]] = 0;
				}
				else{
					ArrayList<Integer> newList = new ArrayList<>();
					newList.add(edge[1]);
					map.put(edge[0], newList);
					visit[edge[0]] = 1;
				}
				if(map.containsKey(edge[1])){
					map.get(edge[1]).add(edge[0]);
					visit[edge[1]] = 0;
				}
				else{
					ArrayList<Integer> newList = new ArrayList<>();
					newList.add(edge[0]);
					map.put(edge[1], newList);
					visit[edge[1]] = 1;
				}
			}
			
			for(int i=0;i<visit.length;i++){
				if(visit[i] != 1){
					int height = DFS(i, null, visit, map);
					if(height < min){
						result.clear();
						result.add(i);
						min = height;
					}
					else if(height == min){
						result.add(i);
					}
				}
			}
			
			if(result.size()==0){
			    for(int i=0;i<n;i++){
			        result.add(i);
			    }
			}
			return result;
	    }
		
		
		private int DFS(int node, Integer parent, int visit[], HashMap<Integer, ArrayList<Integer>> map){
			System.out.println(node);
			if(visit[node] == 1){ return 1; }
			int max = Integer.MIN_VALUE;
			ArrayList<Integer> childs = map.get(node);
			for(Integer child: childs){
				if(parent!=null && child==parent){ continue; }
				else{
					max = Math.max(max, DFS(child, node, visit, map));
				}
			}
			return max+1;
		}
	
	
	
	public static void main(String args[]){
		int [][] edges = new int[][]{{0,1},{1,2},{2,3},{0,4},{0,5},{4,6},{2,7},{4,8},
			{8,9},{4,10},{5,11},{11,12},{3,13},{10,14},{9,15},{14,16},{5,17},{2,18},{0,19},
			{2,20},{0,21},{17,22},{4,23},{23,24},{4,25},{15,26},{25,27},{22,28},{20,29},{2,30},
			{15,31},{23,32},{12,33},{10,34},{21,35},{11,36},{14,37},{25,38},{9,39},{24,40},{29,41},{7,42},
			{12,43},{17,44},{10,45},{18,46},{24,47},{39,48},{35,49},{6,50},{39,51},{4,52},{50,53},{41,54},{17,55},
			{39,56},{10,57},{12,58},{17,59},{28,60},{59,61},{38,62},{23,63},{60,64},{23,65},{30,66},{39,67},{25,68},
			{1,69},{64,70},{4,71},{66,72},{5,73},{26,74},{30,75},{16,76},{68,77},{3,78},{1,79},{76,80},{60,81},{78,82},{8,83},{47,84},{12,85},
			{74,86},{70,87},{27,88},{52,89},{42,90},{4,91},{16,92},{87,93},{37,94},{2,95},{52,96},{26,97},{7,98},{56,99},{18,100},{24,101},{24,102},{7,103},{91,104},{73,105},{6,106},{13,107},{46,108},
			{49,109},{2,110},{104,111},{90,112},{96,113},{97,114},{112,115},{55,116},{2,117},{47,118},{17,119},{113,120},{42,121},{61,122},{58,123},{101,124},{113,125},
			{80,126},{8,127},{64,128},{12,129},{16,130},{90,131},{102,132},{9,133},{103,134},{66,135},{111,136},{12,137},{8,138},{83,139},{76,140},{18,141},{53,142},{115,143},{115,144},{3,145},{78,146},{56,147},{128,148},{120,149},{88,150},{94,151},{133,152},{106,153},{126,154},{132,155},{61,156},{138,157},{39,158},
			{103,159},{152,160},{42,161},{104,162},{88,163},{80,164},{44,165},{154,166},{160,167}};
		System.out.println(new MHTs().findMinHeightTrees(168, edges));
	}
}
