package Snippet;
import java.util.*;

public class MHTs {
	
	public void findMinHeightTrees(int n, int[][] edges) {
		int [] visit = new int[n];
		HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();
		for(int edge[]: edges){
			if(map.containsKey(edge[0])){
				map.get(edge[0]).add(edge[1]);
				
			}
			else{
				ArrayList<Integer> newList = new ArrayList<>();
				newList.add(edge[1]);
				map.put(edge[0], newList);
				visit[edge[0]] = 1;
			}
			if(map.containsKey(edge[1])){
				map.get(edge[1]).add(edge[0]);
				visit[edge[1]] = 1;
			}
			else{
				ArrayList<Integer> newList = new ArrayList<>();
				newList.add(edge[0]);
				map.put(edge[1], newList);
			}
		}
		
		for(int i=0;i<visit.length;i++){
			if(visit[i] != 1){
				System.out.println( i + " : " + DFS(i, null, visit, map));
			}
		}
		
    }
	
	
	private int DFS(int node, Integer parent, int visit[], HashMap<Integer, ArrayList<Integer>> map){
		if(visit[node] == 1){ return 1; }
		int max = Integer.MIN_VALUE;
		ArrayList<Integer> childs = map.get(node);
		for(Integer child: childs){
			if(parent!=null && child==parent){ continue; }
			else{
				max = Math.max(max, DFS(child, node, visit, map));
			}
		}
		return max+1;
	}
	
	
	
	public static void main(String args[]){
		int [][] edges = new int[][]{{1, 0}, {1, 2}, {1, 3}};
		new MHTs().findMinHeightTrees(4, edges);
	}
}
